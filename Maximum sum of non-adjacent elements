import java.util.* ;
import java.io.*; 
import java.util.*;
public class Solution {
	static int f(int index,ArrayList<Integer> nums,int[] dp)
	{
		if(index < 0) return 0;
		if(index == 0) return nums.get(index);

		if(dp[index] != -1) return dp[index];
		

	
		int pick = nums.get(index) + f(index - 2, nums,dp);
		
		
		int notPick = f(index-1, nums,dp);

		return dp[index] = Math.max(pick, notPick);
	}
	public static int maximumNonAdjacentSum(ArrayList<Integer> nums) {
		int n = nums.size();

		int[] dp = new int[n+1];
		// Arrays.fill(dp, -1);
		// return f(n-1,nums,dp);

		// tabulation ---

		dp[0] = nums.get(0);

		for (int i = 1; i < n; i++) {
			int take = nums.get(i);
			if(i>1) take += dp[i-2];

			int nonTake = dp[i-1];

			dp[i] = Math.max(take, nonTake);
		}
		return dp[n-1];
	}
}
