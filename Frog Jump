import java.util.* ;

import java.io.*; 

//code by anil

 

public class Solution {

    public static int frogJump(int n, int heights[]) {

        // Write your code here..

       

        return topDownOptimized(n, heights);

 

    }

 

    private static int recursion(int n, int[] heights, int idx) {

        if (idx >= n-1) return 0;

        int ans = Integer.MAX_VALUE;

 

        ans = Math.min(ans, 

        Math.abs(heights[idx]-heights[idx+1])+recursion(n, heights, idx+1));

        if (idx+2<n) {

            ans = Math.min(ans,

            Math.abs(heights[idx]-heights[idx+2])+recursion(n, heights, idx+2));

        }

 

        return ans;

    }

 

    private static int memoization(int n, int[] heights, int idx, int[] mem) {

        if (idx >= n-1) return 0;

        if (mem[idx]!=-1) return mem[idx];

        int ans = Integer.MAX_VALUE;

        ans = Math.min(ans, Math.abs(heights[idx]-heights[idx+1])

        +memoization(n, heights, idx+1, mem));

        if (idx+2<n) {

            ans = Math.min(ans, Math.abs(heights[idx]-heights[idx+2])

            + memoization(n, heights, idx+2, mem));

        }

 

        return mem[idx] = ans;

    }

 

    private static int topDown(int n, int[] heights) {

        if (n <= 2) return Math.abs(heights[0]-heights[n-1]);

        int[] dp = new int[n];

        dp[n-1] = 0;

        dp[n-2] = Math.abs(heights[n-1]-heights[n-2]);

        for (int i = n-3; i>=0; i--) {

            dp[i] = Math.min(

                Math.abs(heights[i]-heights[i+1])+dp[i+1],

                Math.abs(heights[i]-heights[i+2])+dp[i+2]

            );

        }

        return dp[0];

    }

 

    private static int topDownOptimized(int n, int[] heights) {

        if (n <= 2) return Math.abs(heights[0]-heights[n-1]);

        int plusOne = Math.abs(heights[n-1]-heights[n-2]),

        plusTwo = 0;

        for (int i = n-3; i>=0; i--) {

            int curr = Math.min(

                Math.abs(heights[i]-heights[i+1])+plusOne,

                Math.abs(heights[i]-heights[i+2])+plusTwo

            );

            plusTwo = plusOne;

            plusOne = curr;

        }

        return plusOne;

    }

 

  

 

}
