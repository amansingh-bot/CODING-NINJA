import java.util.*;

import java.io.*;

 

public class Solution {

    static int solve(int[] weight, int[] value, int n, int capacity) {

        int curr[] = new int[capacity + 1];

 

        for (int w = weight[0]; w <= capacity; w++) {

            if (weight[0] <= capacity) {

                curr[w] = value[0];

            } else {

                curr[w] = 0;

            }

        }

        for (int index = 1; index < n; index++) {

            for (int w = capacity; w >= 0; w--) {

                int include = 0;

                if (weight[index] <= w)

                    include = value[index] + curr[w - weight[index]];

                int exclude = 0 + curr[w];

                curr[w] = Math.max(include, exclude);

            }

        }

        return curr[capacity];

    }

 

    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

        return solve(weight, value, n, maxWeight);

    }

}

