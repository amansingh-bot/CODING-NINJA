public class Solution {

    public static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head) {

        if (head == null || head.next == null) {

            return head;

        }

        LinkedListNode<Integer> prev = null;

        LinkedListNode<Integer> curr = head;

        LinkedListNode<Integer> next = null;

        while (curr != null) {

            next = curr.next;

            curr.next = prev;

            prev = curr;

            curr = next;

        }

        return prev;

    }

 

    public static boolean isPalindrome(LinkedListNode<Integer> head) {

        if (head == null || head.next == null)

            return true;

        LinkedListNode<Integer> slow = head;

        LinkedListNode<Integer> fast = head;

        while (fast != null && fast.next != null) {

            slow = slow.next;

            fast = fast.next.next;

        }

        LinkedListNode<Integer> reverseLinkedList = reverse(slow);

        while (reverseLinkedList != null && head != null) {

            if (!head.data.equals(reverseLinkedList.data))

                return false;

            reverseLinkedList = reverseLinkedList.next;

            head = head.next;

        }

        return true;

    }

}
