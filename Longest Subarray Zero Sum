import java.io.*;
import java.util.* ;

import java.util.ArrayList;

public class Solution {

	public static int LongestSubsetWithZeroSum(ArrayList<Integer> arr) {//tc = O(N), sc = O(N)

     //Algo:- if sum has been seen before in the Hashmap it means that the array started after that last sum till the sum appears again   is the array which is giving zero sum for example - 3(last seen) + 0(array after last seen) = 3


        HashMap<Integer,Integer> mapp = new HashMap<>(); //tc = O(N)

        int maxim = 0;

        int sum = 0;

        for(int i=0; i<arr.size(); i++){//TC = O(N)

            sum += arr.get(i);

            if(sum == 0){

                maxim = i+1;

            }else{

                if(mapp.get(sum) != null){ //or mapp.conatainsKey(sum);

                    maxim = Math.max(maxim,i-mapp.get(sum));

                }else{

                    mapp.put(sum,i);

                }

            }

        }


 

        return maxim;

    }

 
}
